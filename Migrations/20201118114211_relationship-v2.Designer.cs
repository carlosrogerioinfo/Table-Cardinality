// <auto-generated />
using System;
using App.EFCore.Test.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.EFCore.Test.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20201118114211_relationship-v2")]
    partial class relationshipv2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("efcore_autor");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.Livro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnoLancamento")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("efcore_livro");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.LivroAutor", b =>
                {
                    b.Property<Guid>("AutorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivroId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AutorId", "LivroId");

                    b.HasIndex("LivroId");

                    b.ToTable("efcore_livro_autor");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToMany.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("efcore_aluno");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToMany.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("efcore_curso");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToOne.EnderecoPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("efcore_pessoa_endereco");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToOne.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<char>("TipoPessoa")
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("TipoPessoa");

                    b.HasKey("Id");

                    b.ToTable("efcore_pessoa");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.LivroAutor", b =>
                {
                    b.HasOne("App.EFCore.Test.Models.ManyToMany.Autor", "Autor")
                        .WithMany("LivrosAutores")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.EFCore.Test.Models.ManyToMany.Livro", "Livro")
                        .WithMany("LivrosAutores")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToMany.Aluno", b =>
                {
                    b.HasOne("App.EFCore.Test.Models.OneToMany.Curso", "Curso")
                        .WithMany("Alunos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToOne.EnderecoPessoa", b =>
                {
                    b.HasOne("App.EFCore.Test.Models.OneToOne.Pessoa", "Pessoa")
                        .WithOne("EnderecoPessoa")
                        .HasForeignKey("App.EFCore.Test.Models.OneToOne.EnderecoPessoa", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.Autor", b =>
                {
                    b.Navigation("LivrosAutores");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.ManyToMany.Livro", b =>
                {
                    b.Navigation("LivrosAutores");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToMany.Curso", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("App.EFCore.Test.Models.OneToOne.Pessoa", b =>
                {
                    b.Navigation("EnderecoPessoa");
                });
#pragma warning restore 612, 618
        }
    }
}
